@using AVStaffing.Models
@using AVStaffing.Models.Constants
@model AVStaffing.Models.Entities.Portfolio
@{

    ViewBag.Title = "CompanyPortfolio";
    Layout = "~/Views/Shared/_Layout.cshtml";


    var selectList = new SelectList( new List<SelectListItem>
    {
        new SelectListItem
        {
            Text = "English",
            Value = SupportedLanguages.English
        },
        new SelectListItem
        {
            Text = "Dutch",
            Value = SupportedLanguages.Dutch
        },
    }, "Value", "Text" );
}

<style>
    .field-validation-error {
        color: red
    }

    .validation-summary-errors {
        color: red;
    }
</style>

<div class="subheader py-2 py-lg-6  subheader-transparent " id="kt_subheader">
    <div class=" container  d-flex align-items-center justify-content-between flex-wrap flex-sm-nowrap">
        <div class="d-flex align-items-center flex-wrap mr-1">
            <div class="d-flex align-items-baseline flex-wrap mr-5">
                <h5 class="text-dark font-weight-bold my-1 mr-5">
                    Company Portfolio
                </h5>
                <ul class="breadcrumb breadcrumb-transparent breadcrumb-dot font-weight-bold p-0 my-2 font-size-sm">
                    <li class="breadcrumb-item">
                        <a href="#/" class="text-muted">
                            Account
                        </a>
                    </li>

                    <li class="breadcrumb-item">
                        <a href="#/" class="text-muted">
                            Portfolio
                        </a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>

<div class="d-flex flex-column-fluid">
    <div class=" container ">
        @using (Html.BeginForm("CompanyPortfolio", "Content", FormMethod.Post, new{ enctype = "multipart/form-data" }))
        {
            @Html.HiddenFor(x => x.Id)


            <div class="card card-custom justify-content-center">
                <div class="card-header">
                    <div class="card-title">
                        <span class="card-icon"><i class="fa fa-user text-primary"></i></span>
                        <h3 class="card-label">
                            @Html.Raw("Update Portfolio")
                        </h3>
                    </div>
                </div>


                <div class="card-body">
                    <div class="row">

                        <div class="col-md-12">
                            <div class="form-group row">
                                @Html.ValidationSummary(true)
                            </div>
                            @Html.HiddenFor(x => x.Id)
                            @Html.HiddenFor(x => x.Language)
                            @*<div class="form-group">
            @Html.LabelFor(model => model.Language)
            @Html.DropDownListFor(model => model.Language, selectList, new {@class="form-control"})
            @Html.ValidationMessageFor(model => model.Language, "", new { @class = "text-danger" })
        </div>*@
                            <div class="form-group">
                                @Html.LabelFor(model => model.HomeTitle)
                                @Html.EditorFor(model => model.HomeTitle, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.HomeTitle, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.HomeSubTitle)
                                @Html.EditorFor(model => model.HomeSubTitle, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.HomeSubTitle, "", new { @class = "text-danger" })
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.About)
                                @Html.EditorFor(model => model.About, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.About, "", new { @class = "text-danger" })
                            </div>

                        

                            <div class="form-group">
                                <input type="file" name="WhiteLogoImage" onchange="readURL2(this)" data-src="#whiteLogoDisplay" accept=".png, .jpg, .jpeg">
                                @Html.HiddenFor(x => x.WhiteLogo)

                                <div class="image-input image-input-empty image-input-outline" id="whiteLogoDisplay" style="background-image: url(@Url.Content( string.IsNullOrWhiteSpace(Model.WhiteLogo)?  "~/Theme/demo-logo.png" : Model.WhiteLogo))">
                                    <div class="image-input-wrapper"></div>
                                </div>
                            </div>

                            <div class="form-group">
                                <input type="file" name="BlackLogoImage" onchange="readURL2(this)" data-src="#blackLogoDisplay" accept=".png, .jpg, .jpeg">
                                @Html.HiddenFor(x => x.BlackLogo)

                                <div class="image-input image-input-empty image-input-outline" id="blackLogoDisplay" style="background-image: url(@Url.Content( string.IsNullOrWhiteSpace(Model.BlackLogo)?  "~/Theme/demo-logo.png" : Model.BlackLogo))">
                                    <div class="image-input-wrapper"></div>
                                </div>
                            </div>



                            <div class="form-group">
                                <div class="float-right">
                                    <a href="@Url.Action("Index", "Lead")" class="btn btn-default font-weight-bold btn-sm px-3 font-size-base">
                                        Back
                                    </a>

                                    <div class="btn-group ml-2">
                                        <button type="submit" class="btn btn-primary font-weight-bold btn-sm px-3 font-size-base">
                                            @if (Model.Id == 0)
                                            {
                                                @Html.Raw("Update Portfolio")
                                            }
                                            else
                                            {
                                                @Html.Raw("Update Portfolio")
                                            }
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@section Scripts
{

    <script src="https://cdn.tiny.cloud/1/bvop19e8cyzwod147lpbd1e77sd2gfgu7e2quc2jq80tl0lc/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
    <script>

        function initMCEexact(e, initialValue) {
            tinymce.init({
                content_css: "@Url.Content("~/ICare/css/style.css"),@Url.Content("~/ICare/css/bootstrap.min.css"),@Url.Content("~/ICare/css/animate.css"),@Url.Content("~/ICare/css/font-awesome.min.css"),@Url.Content("~/ICare/style.css"),@Url.Content("~/bundles/webBaseLayoutCss")",
                initialValue: initialValue,
                //language: "ar", (function(){})(),
                directionality: 'ltr',
                selector: e,
                toolbar_mode: 'floating',
                height: 900,
                images_upload_url: "@Url.Action("AddMedia", "Content")",
                image_list: "@Url.Action("GetMedia", "Content")",
                paste_data_images: true,
                automatic_uploads: true,
                branding: false,
                image_advtab: true,
                images_upload_handler: function(blobInfo, success, failure, progress) {
                    var formData;
                    var xhr = new XMLHttpRequest();
                    xhr.withCredentials = false;
                    xhr.open('POST', `@Url.Action("AddMedia", "Content")`);
                    xhr.upload.onprogress = function(e) {
                        progress(e.loaded / e.total * 100);
                    };
                    xhr.onload = function() {
                        var json;
                        if (xhr.status < 200 || xhr.status >= 300) {
                            failure('HTTP Error: ' + xhr.status);
                            return; }

                        json = JSON.parse(xhr.responseText);

                        if (!json || typeof json.MediaUrl != 'string') {
                            failure('Invalid JSON: ' + xhr.responseText);
                            return;
                        }
                        success(json.MediaUrl);
                    };

                    xhr.onerror = function() {
                        failure('Image upload failed due to a XHR Transport error. Code: ' + xhr.status);
                    };

                    formData = new FormData();
                    formData.append('file', blobInfo.blob(), blobInfo.filename());
                    xhr.send(formData);
                },
                plugins: [
                    'advlist autolink lists link image charmap print preview hr anchor pagebreak',
                    'searchreplace visualblocks code fullscreen',
                    'image code',
                    'image imagetools',
                    'insertdatetime media table paste code help wordcount',
                ],
                toolbar:
                    'undo redo | image code | formatselect | bold italic backcolor | \
                                                                alignleft aligncenter alignright alignjustify | \
                                                                bullist numlist outdent indent | removeformat',
                menu: {
                    file: { title: 'File', items: ' preview | print ' }
                },
                menubar: 'file edit view insert format tools table',
                apply_source_formatting: true

            });
            var scriptLoader = new tinymce.dom.ScriptLoader();
            scriptLoader.add('@Url.Content("~/Frontend/assets/js/jquery.min.js")');
            scriptLoader.add("@Url.Content("~/Frontend/assets/js/flickity.pkgd.min.js")");
        }


        initMCEexact("#Services", `@Html.Raw(Model.Services)`);

        initMCEexact("#About", `@Html.Raw(Model.About)`);




    </script>
}

